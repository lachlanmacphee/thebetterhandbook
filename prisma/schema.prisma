// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

// Models

model University {
  id                   Int                   @id @default(autoincrement())
  name                 String                @unique
  handbookUrl          String?
  users                User[]
  faculties            Faculty[]
  campuses             Campus[]
  semesters            Semester[]
  units                Unit[]
  unitAdditionRequests UnitAdditionRequest[]
}

model User {
  id                    Int                   @id @default(autoincrement())
  email                 String                @unique
  name                  String?
  role                  UserRole              @default(USER)
  apiKey                String?
  preferredUniversityId Int?
  preferredUniversity   University?           @relation(fields: [preferredUniversityId], references: [id])
  reviews               Review[]
  reviewReactions       ReviewReaction[]
  unitAdditionRequests  UnitAdditionRequest[]
  unitSuggestions       UnitSuggestion[]
  unitDeprecations      UnitDeprecation[]
}

model Faculty {
  id           Int        @id @default(autoincrement())
  name         String
  universityId Int        @default(1)
  university   University @relation(fields: [universityId], references: [id])
  Unit         Unit[]

  @@unique([name, universityId])
}

model Campus {
  id           Int          @id @default(autoincrement())
  name         String
  universityId Int          @default(1)
  university   University   @relation(fields: [universityId], references: [id])
  UnitCampus   UnitCampus[]

  @@unique([name, universityId])
}

model Semester {
  id           Int            @id @default(autoincrement())
  name         String
  universityId Int            @default(1)
  university   University     @relation(fields: [universityId], references: [id])
  UnitSemester UnitSemester[]

  @@unique([name, universityId])
}

model UnitCampus {
  id       Int    @id @default(autoincrement())
  unitId   Int
  unit     Unit   @relation(fields: [unitId], references: [id])
  campusId Int
  campus   Campus @relation(fields: [campusId], references: [id])

  @@unique([unitId, campusId])
}

model UnitSemester {
  id         Int      @id @default(autoincrement())
  unitId     Int
  unit       Unit     @relation(fields: [unitId], references: [id])
  semesterId Int
  semester   Semester @relation(fields: [semesterId], references: [id])

  @@unique([unitId, semesterId])
}

model Unit {
  id           Int               @id @default(autoincrement())
  name         String
  code         String
  level        Int
  creditPoints Int
  reviews      Review[]
  campuses     UnitCampus[]
  semesters    UnitSemester[]
  facultyId    Int
  faculty      Faculty           @relation(fields: [facultyId], references: [id])
  universityId Int               @default(1)
  university   University        @relation(fields: [universityId], references: [id])
  isDeprecated Boolean           @default(false)
  deprecations UnitDeprecation[]
  suggestions  UnitSuggestion[]

  prerequisites     UnitPrerequisite[] @relation("prerequisite")
  isPrerequisiteFor UnitPrerequisite[] @relation("isPrerequisiteFor")

  corequisites     UnitCorequisite[] @relation("corequisite")
  isCorequisiteFor UnitCorequisite[] @relation("isCorequisiteFor")

  @@unique([code, universityId])
  @@index([universityId])
  @@index([facultyId])
  @@index([isDeprecated])
}

model UnitPrerequisite {
  id             Int  @id @default(autoincrement())
  unitId         Int
  unit           Unit @relation("prerequisite", fields: [unitId], references: [id])
  prerequisiteId Int
  prerequisite   Unit @relation("isPrerequisiteFor", fields: [prerequisiteId], references: [id])

  @@unique([unitId, prerequisiteId])
}

model UnitCorequisite {
  id            Int  @id @default(autoincrement())
  unitId        Int
  unit          Unit @relation("corequisite", fields: [unitId], references: [id])
  corequisiteId Int
  corequisite   Unit @relation("isCorequisiteFor", fields: [corequisiteId], references: [id])

  @@unique([unitId, corequisiteId])
}

model UnitAdditionRequest {
  id           Int        @id @default(autoincrement())
  code         String
  createdAt    DateTime   @default(now())
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  universityId Int        @default(1)
  university   University @relation(fields: [universityId], references: [id])

  @@unique([code, universityId])
}

model UnitDeprecation {
  id        Int           @id @default(autoincrement())
  reason    String
  createdAt DateTime      @default(now())
  userId    Int
  user      User          @relation(fields: [userId], references: [id])
  unitId    Int
  unit      Unit          @relation(fields: [unitId], references: [id])
  status    RequestStatus @default(PENDING)
}

model UnitSuggestion {
  id        Int           @id @default(autoincrement())
  field     String // e.g. "campus", "semester"
  reason    String
  createdAt DateTime      @default(now())
  userId    Int
  user      User          @relation(fields: [userId], references: [id])
  unitId    Int
  unit      Unit          @relation(fields: [unitId], references: [id])
  status    RequestStatus @default(PENDING)
}

model Review {
  id                 Int              @id @default(autoincrement())
  title              String
  text               String
  yearCompleted      Int              @default(2025)
  overallRating      Int
  teachingRating     Int
  contentRating      Int
  difficultyRating   Int
  workloadRating     Int
  requiresAttendance Boolean
  isWamBooster       Boolean          @default(false)
  createdAt          DateTime         @default(now())
  userId             Int
  user               User             @relation(fields: [userId], references: [id])
  unitId             Int
  unit               Unit             @relation(fields: [unitId], references: [id])
  reactions          ReviewReaction[]

  @@unique([userId, unitId])
  @@index([unitId])
  @@index([userId])
  @@index([createdAt])
}

model ReviewReaction {
  id        Int      @id @default(autoincrement())
  isLike    Boolean // true for like, false for dislike
  reviewId  Int
  review    Review   @relation(fields: [reviewId], references: [id])
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, reviewId])
}
